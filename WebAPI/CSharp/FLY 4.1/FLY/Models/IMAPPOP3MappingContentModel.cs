// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AvePoint.Migration.Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class IMAPPOP3MappingContentModel
    {
        /// <summary>
        /// Initializes a new instance of the IMAPPOP3MappingContentModel
        /// class.
        /// </summary>
        public IMAPPOP3MappingContentModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IMAPPOP3MappingContentModel
        /// class.
        /// </summary>
        /// <param name="migrateArchivedMailboxOrFolder">whether to migrate the
        /// archived mailbox/folder</param>
        public IMAPPOP3MappingContentModel(IMAPPOP3MailBoxObject source, string destinationMailbox, bool? migrateArchivedMailboxOrFolder = default(bool?))
        {
            Source = source;
            DestinationMailbox = destinationMailbox;
            MigrateArchivedMailboxOrFolder = migrateArchivedMailboxOrFolder;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public IMAPPOP3MailBoxObject Source { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "destinationMailbox")]
        public string DestinationMailbox { get; set; }

        /// <summary>
        /// Gets or sets whether to migrate the archived mailbox/folder
        /// </summary>
        [JsonProperty(PropertyName = "migrateArchivedMailboxOrFolder")]
        public bool? MigrateArchivedMailboxOrFolder { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
            if (DestinationMailbox == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DestinationMailbox");
            }
            if (Source != null)
            {
                Source.Validate();
            }
        }
    }
}
