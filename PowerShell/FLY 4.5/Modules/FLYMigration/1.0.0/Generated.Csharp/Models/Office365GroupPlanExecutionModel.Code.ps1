// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AvePoint.PowerShell.FLYMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Office365GroupPlanExecutionModel
    {
        /// <summary>
        /// Initializes a new instance of the Office365GroupPlanExecutionModel
        /// class.
        /// </summary>
        public Office365GroupPlanExecutionModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Office365GroupPlanExecutionModel
        /// class.
        /// </summary>
        /// <param name="migrationType">"Full" : Migrate Groups with all of
        /// their mailbox and SharePoint data.
        /// "Incremental" : Migrate the changes since the last job.
        /// "TeamsOnly" : Migrate Groups without their mailboxes and SharePoint
        /// data. Possible values include: 'Incremental', 'Full',
        /// 'GroupsOnly'</param>
        public Office365GroupPlanExecutionModel(string migrationType)
        {
            MigrationType = migrationType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets "Full" : Migrate Groups with all of their mailbox and
        /// SharePoint data.
        /// "Incremental" : Migrate the changes since the last job.
        /// "TeamsOnly" : Migrate Groups without their mailboxes and SharePoint
        /// data. Possible values include: 'Incremental', 'Full', 'GroupsOnly'
        /// </summary>
        [JsonProperty(PropertyName = "migrationType")]
        public string MigrationType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MigrationType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MigrationType");
            }
        }
    }
}
