// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AvePoint.PowerShell.FLYMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class PlanGroupDetailsModel
    {
        /// <summary>
        /// Initializes a new instance of the PlanGroupDetailsModel class.
        /// </summary>
        public PlanGroupDetailsModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PlanGroupDetailsModel class.
        /// </summary>
        /// <param name="method">Choose a group type to run the plans in the
        /// plan group.
        /// "Parallel" will run multiple plans simultaneously according to the
        /// specified concurrent plan count.
        /// "Sequential" will run the plans according to their order in the
        /// plan group.
        /// Possible values include: ['Parallel', 'Sequential']</param>
        /// <param name="id">ID of the plan group.</param>
        /// <param name="name">Name of the plan group.</param>
        /// <param name="parallelPlanCount">Specify the number of the
        /// concurrent plans.
        /// Concurrent plan allows you to simultaneously run multiple plans in
        /// one plan group.</param>
        /// <param name="scheduleDetails">The schedule of the plan
        /// groups.</param>
        /// <param name="description">Description of the plan group.</param>
        public PlanGroupDetailsModel(string method, string id, string name, int? parallelPlanCount = default(int?), ScheduleDetailsModel scheduleDetails = default(ScheduleDetailsModel), IList<PlanSummaryModel> plans = default(IList<PlanSummaryModel>), string description = default(string))
        {
            Method = method;
            ParallelPlanCount = parallelPlanCount;
            ScheduleDetails = scheduleDetails;
            Plans = plans;
            Id = id;
            Name = name;
            Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets choose a group type to run the plans in the plan
        /// group.
        /// "Parallel" will run multiple plans simultaneously according to the
        /// specified concurrent plan count.
        /// "Sequential" will run the plans according to their order in the
        /// plan group.
        /// Possible values include: ['Parallel', 'Sequential']
        /// </summary>
        [JsonProperty(PropertyName = "method")]
        public string Method { get; set; }

        /// <summary>
        /// Gets or sets specify the number of the concurrent plans.
        /// Concurrent plan allows you to simultaneously run multiple plans in
        /// one plan group.
        /// </summary>
        [JsonProperty(PropertyName = "parallelPlanCount")]
        public int? ParallelPlanCount { get; set; }

        /// <summary>
        /// Gets or sets the schedule of the plan groups.
        /// </summary>
        [JsonProperty(PropertyName = "scheduleDetails")]
        public ScheduleDetailsModel ScheduleDetails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "plans")]
        public IList<PlanSummaryModel> Plans { get; set; }

        /// <summary>
        /// Gets or sets ID of the plan group.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets name of the plan group.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets description of the plan group.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Method == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Method");
            }
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (ScheduleDetails != null)
            {
                ScheduleDetails.Validate();
            }
            if (Plans != null)
            {
                foreach (var element in Plans)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
