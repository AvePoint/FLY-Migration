// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AvePoint.PowerShell.FLYMigration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class PSTFileConnectionOption
    {
        /// <summary>
        /// Initializes a new instance of the PSTFileConnectionOption class.
        /// </summary>
        public PSTFileConnectionOption()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PSTFileConnectionOption class.
        /// </summary>
        /// <param name="path">UNC Path</param>
        public PSTFileConnectionOption(string path, BasicCredential basicCredential = default(BasicCredential), PSTFileConnectionAdvancedSettingsOption advancedSettings = default(PSTFileConnectionAdvancedSettingsOption))
        {
            BasicCredential = basicCredential;
            Path = path;
            AdvancedSettings = advancedSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "basicCredential")]
        public BasicCredential BasicCredential { get; set; }

        /// <summary>
        /// Gets or sets UNC Path
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "advancedSettings")]
        public PSTFileConnectionAdvancedSettingsOption AdvancedSettings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Path == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Path");
            }
            if (BasicCredential != null)
            {
                BasicCredential.Validate();
            }
        }
    }
}
